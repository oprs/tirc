dnl TIRC autoconf template
dnl Copyright (c) 1996-1998 Matthias K. Buelow.  All rights reserved.
dnl $Id: configure.in,v 1.48 1998/02/24 18:30:16 mkb Exp $
dnl Process this file with autoconf to produce a configure script.

AC_REVISION($Revision: 1.48 $)

dnl Init stuff
AC_INIT(main.c)
AC_CONFIG_HEADER(config.h)

echo Configuring TIRC version `sed -n < v.h '/VERSTRING/s/.*"\(.*\)"/\1/p'`

AC_CANONICAL_HOST
rm -f ht.h
if test "$host" != ""; then
	echo "/* generated by configure, do not edit */" > ht.h
	echo "#ifndef HT_H" >> ht.h
	echo "#define HT_H 1" >> ht.h
	echo "#define HOSTTYPE \"$host\"" >> ht.h
	echo "#endif" >> ht.h
else
	echo "/* nop */" > ht.h
fi

dnl User probably wants to build a debug version.
AC_MSG_CHECKING(if --enable-debug option specified)
AC_ARG_ENABLE(debug,
	[  --enable-debug          Include debug output and compiler symbol table],
	[tirc_cv_debug="yes"], [tirc_cv_debug="no"])
if test "$tirc_cv_debug" = yes; then
	AC_DEFINE(DEBUGV)
	OPTFLAG=${OPTFLAG-"-g"}
else
	dnl Defining NDEBUG disables the assert() macro.
	AC_DEFINE(NDEBUG)
fi
AC_MSG_RESULT($tirc_cv_debug)

dnl If we're debugging, this option adds lint-like paranoid gcc flags.
AC_MSG_CHECKING(if --enable-gcc-maxdiag option specified)
AC_ARG_ENABLE(gcc-maxdiag,
	[  --enable-gcc-maxdiag    Add extra warning flags when using gcc, with a diagnostic level similar to a lint run.  Only in combination with --enable-debug],
	[tirc_cv_gcc_maxdiag="yes"], [tirc_cv_gcc_maxdiag="no"])
if test "$tirc_cv_gcc_maxdiag" = yes -a "$tirc_cv_debug" = yes; then
	CPPFLAGS="$CPPFLAGS -W -Wall -Wshadow -Wpointer-arith -Wconversion -Waggregate-return -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations"
fi
AC_MSG_RESULT($tirc_cv_gcc_maxdiag)

dnl Check whether we should create a lint Makefile.
AC_MSG_CHECKING(if --enable-lint option specified)
AC_ARG_ENABLE(lint,
	[  --enable-lint           Make build files for a lint run],
	[tirc_cv_lint="yes"], [tirc_cv_lint="no"])
AC_MSG_RESULT($tirc_cv_lint)

dnl Check whether we should rather use the bundled regexp functions.
AC_MSG_CHECKING(if --with-bundled-regex option specified)
AC_ARG_WITH(bundled-regex,
	[  --with-bundled-regex    Use the bundled regular expression functions],
	[tirc_cv_bundled_re="yes"], [tirc_cv_bundled_re="no"])
AC_MSG_RESULT($tirc_cv_bundled_re)

dnl Check whether user wants to link against GNU regex.
AC_MSG_CHECKING(if --with-gnu-regex option specified)
AC_ARG_WITH(gnu-regex,
	[  --with-gnu-regex        Link against the GNU regex functions object file],
	[tirc_cv_gnu_re="yes"], [tirc_cv_gnu_re="no"])
AC_MSG_RESULT($tirc_cv_gnu_re)

dnl Check if user wants to use svipc shmem.
AC_MSG_CHECKING(if --with-svipc-shm option specified)
AC_ARG_WITH(svipc-shm,
	[  --with-svipc-shm        Force usage of SVIPC shmem segments (debugging)],
	[tirc_cv_force_svipc="yes"], [tirc_cv_force_svipc="no"])
AC_MSG_RESULT($tirc_cv_force_svipc)

dnl Check if user wants to include linux/glibc fix.
AC_MSG_CHECKING(if --with-linux-glibc option specified)
AC_ARG_WITH(linux-glibc,
	[  --with-linux-glibc      Include fix for linux/glibc systems],
	[tirc_cv_linux_glibc="yes"], [tirc_cv_linux_glibc="no"])
AC_MSG_RESULT($tirc_cv_linux_glibc)

dnl Check if user wants to have colour support compiled in.
AC_MSG_CHECKING(if --with-ansi-colours option specified)
AC_ARG_WITH(ansi-colours,
	[  --with-ansi-colours     Include support for ANSI colours on ttys (default: enabled)],
	[tirc_cv_ansi_colours="$withval"], [tirc_cv_ansi_colours="no"])
AC_MSG_RESULT($tirc_cv_ansi_colours)

dnl Check if user wants to use runtime loaded modules.
AC_MSG_CHECKING(if --with-dlmod option specified)
AC_ARG_WITH(dlmod,
	[  --with-dlmod            Add support for runtime loadable modules (default: enabled)],
	[tirc_cv_dlmod="$withval"], [tirc_cv_dlmod="no"])
AC_MSG_RESULT($tirc_cv_dlmod)

dnl Check if we should link against libefence.
AC_MSG_CHECKING(if --with-efence option specified)
AC_ARG_WITH(efence,
	[  --with-efence           Link against libefence, for memory reference debugging],
	[tirc_cv_efence="yes"], [tirc_cv_efence="no"])
AC_MSG_RESULT($tirc_cv_efence)

AC_SUBST(CPPFLAG)
AC_SUBST(LINTFLAGS)
AC_SUBST(CXFLAGS)
AC_SUBST(DLCFLAGS)
AC_SUBST(DLLDFLAGS)

dnl These were partly taken from the nvi configure.in.
case "$host_os" in
aix3.2.5) OPTFLAG=${OPTFLAG-"-O"} ;;
aix4.1*) CFLAGS=${CFLAGS-"-qstrict"}
	OPTFLAG=${OPTFLAG-"-O3"} ;;
aux*)	CPPFLAGS=${CPPFLAGS-"-ZP -D_BSD_SOURCE -D_SYSV_SOURCE -D_AUX_SOURCE"}
	LDFLAGS=${LDFLAGS-"-ZP"}
	OPTFLAG=${OPTFLAG-"-O"} ;;
bsd4.4)	OPTFLAG=${OPTFLAG-"-O2"}
	LINTFLAGS=${LINTFLAGS-"-g -s"} ;;
bsdi*)	CC=${CC-"shlicc"}
	OPTFLAG=${OPTFLAG-"-O2"}
	LINTFLAGS=${LINTFLAGS-"-g -s"} ;;
freebsd*) OPTFLAG=${OPTFLAG-"-O2"}
	LINTFLAGS=${LINTFLAGS-"-g -s"}
	CXFLAGS=${CXFLAGS-"-xref all -html"} ;;
netbsd*) OPTFLAG=${OPTFLAG-"-O2"}
	LINTFLAGS=${LINTFLAGS-"-g -s"} ;;
openbsd*) OPTFLAG=${OPTFLAG-"-O2"}
	LINTFLAGS=${LINTFLAGS-"-g -s"}
	CXFLAGS=${CXFLAGS-"-xref all -html"} ;;
linux*)	OPTFLAG=${OPTFLAG-"-O2"}
	CPPFLAGS="$CPPFLAGS -D_BSD_SOURCE -D_POSIX_C_SOURCE=2 -D__USE_BSD -D__USE_BSD_SIGNAL"
	cv_add_ldf=${cv_add_ldf-"-export-dynamic -ldl"} ;;
irix*)	OPTFLAG=${OPTFLAG-"-O2"}
	LDFLAGS=${LDFLAGS-"-lgen"} ;;
lynxos*) AC_MSG_CHECKING([for GNU C (gcc) version 2.x])
	ac_cv_gcc_vers=`${CC-cc} -v 2>&1 | \
		grep "gcc version " | sed 's/.*version //'`
	ac_cv_gcc_major=`echo "$ac_cv_gcc_vers" | sed 's/\..*//'`
	if test "$ac_cv_gcc_major" = "2" ; then
		AC_MSG_RESULT(yes)
	else
		AC_MSG_RESULT(no)
		echo 'TIRC probably needs gcc 2.x to build on LynxOS'
	fi
	OPTFLAG=${OPTFLAG-"-O2"} ;;
nextstep3) CPPFLAGS=${CPPFLAGS-"-w -pipe -posix"}
	LDFLAGS=${LDFLAGS-"-posix"}
	OPTFLAG=${OPTFLAG-"-O2"} ;;
osf*)	CPPFLAGS=${CPPFLAGS-"-std1"}
	OPTFLAG=${OPTFLAG-"-O -Olimit 1000"}
	DLCFLAGS=${DLCFLAGS-"-c -fpic"}
	DLLDFLAGS=${DLLDFLAGS-"-shared -call_shared -no_archive"} ;;
solaris*) LDFLAGS=${LDFLAGS-"-lnsl -lsocket"} ;;
svr4*)	LDFLAGS=${LDFLAGS-"-lnsl -lsocket"} ;;
hpux*)	CPPFLAGS=${CPPFLAGS-"-Aa -D_HPUX_SOURCE"} ;;
esac

dnl Default compiler is cc instead of the autoconf-preferred gcc.
AC_SUBST(CC)
CC=${CC-cc}
AC_SUBST(OPTFLAG)
OPTFLAG=${OPTFLAG-"-O"}

dnl Checks for programs
AC_PROG_CC
AC_PROG_CPP
AC_PROG_AWK
AC_PROG_INSTALL
AC_PATH_PROG(CXREF, cxref)
if test "$tirc_cv_lint" = yes; then
	AC_PATH_PROG(LINT, lint)
	AC_SUBST(LINT)
fi
AC_PATH_PROG(MKDEP, mkdep)

dnl Add flags to the ldflags; deferred so that they don't fuck up the
dnl compiler checking before (autoconf is dull).
LDFLAGS="$LDFLAGS $cv_add_ldf"

dnl Check if mkdep is actually working
AC_MSG_CHECKING(whether mkdep actually works)
AC_CACHE_VAL(tirc_cv_bsd_mkdep, [
	rm -f .depend config.h
	echo "/* test */" > config.h
	eval "$ac_cv_path_MKDEP -I. flood.c system.c > /dev/null 2>&1"
	if test $? -eq 0 -a -f .depend; then
		tirc_cv_bsd_mkdep=yes
	else
		tirc_cv_bsd_mkdep=no
	fi
	rm -f .depend config.h
])
if test "$tirc_cv_bsd_mkdep" = yes; then
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)
	echo "Using bundled mkdep script"
	MKDEP="./mkdep.sh"
fi

dnl Checks for certain operating systems
AC_AIX
AC_ISC_POSIX
AC_MINIX

dnl Checks for libraries.
AC_SUBST(LIBS)

dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(arpa/inet.h assert.h ctype.h errno.h fcntl.h libgen.h limits.h)
AC_CHECK_HEADERS(malloc.h netdb.h netinet/in.h pwd.h regex.h sgtty.h signal.h)
AC_CHECK_HEADERS(stdarg.h stdio.h stdlib.h string.h sys/errno.h sys/ioctl.h)
AC_CHECK_HEADERS(sys/ipc.h sys/mman.h sys/param.h sys/resource.h sys/select.h)
AC_CHECK_HEADERS(sys/shm.h sys/signal.h sys/socket.h sys/stat.h sys/termios.h)
AC_CHECK_HEADERS(sys/time.h sys/types.h sys/uio.h sys/wait.h termios.h time.h)
AC_CHECK_HEADERS(unistd.h varargs.h memory.h strings.h dlfcn.h locale.h)
AC_CHECK_HEADERS(stddef.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_PID_T
AC_HEADER_TIME
AC_STRUCT_TM
AC_CHECK_TYPE(ptrdiff_t, long)

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_FUNC_STRFTIME
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(gethostname gettimeofday select socket strdup strerror strstr)
AC_CHECK_FUNCS(mkstemp mktemp basename getpagesize memmove raise labs abs)
AC_CHECK_FUNCS(tcgetattr tcsetattr gtty stty sysconf strtoul getrusage)
AC_CHECK_FUNCS(dlopen dlclose dlsym dlerror setlocale memset bzero vsnprintf)
AC_CHECK_FUNCS(getsid)

dnl Check if the compiler can use pointers to void.
AC_MSG_CHECKING(whether the compiler groks pointer to void)
AC_CACHE_VAL(tirc_cv_have_voidptr, [
	AC_TRY_RUN([
main()
{
	void *t = 0;
	char *a;
	a = (void *) t;
	exit(0);
}	], [tirc_cv_have_voidptr=yes], [tirc_cv_have_voidptr=no], :)])

AC_MSG_RESULT($tirc_cv_have_voidptr)

if test "$tirc_cv_have_voidptr" = yes; then
	AC_DEFINE(HAVE_VOIDPTR)
fi

dnl Check usability of mmap(2) for allocating shared memory.
dnl (only if user didn't override it with --with-svipc-shm)

if test "$tirc_cv_force_svipc" = no; then

AC_CHECK_FUNCS(mmap, [tirc_cv_have_mmap=yes], [tirc_cv_have_mmap=no])

if test "$tirc_cv_have_mmap" = yes; then
    AC_MSG_CHECKING(whether mmap can do shared maps of anonymous memory)
    AC_CACHE_VAL(tirc_cv_anonshrd_mmap, [
    AC_TRY_RUN([
#include <sys/types.h>
#include <sys/mman.h>
#if !defined(MAP_ANONYMOUS) && defined(MAP_ANON)
#define	MAP_ANONYMOUS	MAP_ANON
#endif
main()
{
	exit((mmap(0, 100, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS,
		-1, 0) == (void *)-1));
}   ], [tirc_cv_anonshrd_mmap=yes], [tirc_cv_anonshrd_mmap=no], :)])

    AC_MSG_RESULT($tirc_cv_anonshrd_mmap)

    if test "$tirc_cv_anonshrd_mmap" = yes; then
	AC_DEFINE(HAVE_ANONSHRD_MMAP)
    fi

    if test "$tirc_cv_anonshrd_mmap" = no ; then
	AC_MSG_CHECKING(whether mapping /dev/zero will work instead)
	AC_CACHE_VAL(tirc_cv_devzero_mmap, [
	AC_TRY_RUN([
#include <sys/types.h>
#include <sys/mman.h>
#include <fcntl.h>
main()
{
	int zfd;
	if ((zfd = open("/dev/zero", O_RDWR)) == -1)
		exit(1);
	exit((mmap(0, 100, PROT_READ | PROT_WRITE, MAP_SHARED, zfd, 0) ==
		(void *)-1));
}], [tirc_cv_devzero_mmap=yes], [tirc_cv_devzero_mmap=no], :)])

	AC_MSG_RESULT($tirc_cv_devzero_mmap)

	if test "$tirc_cv_devzero_mmap" = yes; then
	    AC_DEFINE(HAVE_DEVZERO_MMAP)
	fi

	if test "$tirc_cv_devzero_mmap" = no; then
	    echo "Your mmap() is of no use for us."
	else
	    AC_MSG_RESULT(yes)
	    AC_DEFINE(HAVE_REALFILE_MMAP)
	fi
    fi
else
    echo "You don't seem to have mmap()"
fi

dnl ( if tirc_cv_force_svipc )...
else
	echo "User skipped mmap tests"
	tirc_cv_anonshrd_mmap=no;
	tirc_cv_devzero_mmap=no;
fi

if test "$tirc_cv_anonshrd_mmap" = no -a "$tirc_cv_devzero_mmap" = no; then
	echo Checking whether System V IPC shared memory segments are available
	AC_CHECK_FUNCS(shmget shmat shmdt shmctl)
	if test "$ac_cv_func_shmget" = yes -a "$ac_cv_func_shmat" = yes -a \
	    "$ac_cv_func_shmdt" = yes -a "$ac_cv_func_shmctl" = yes; then
		AC_DEFINE(HAVE_SVIPC_SHM)
		echo "Using the SVIPC shared memory mechanism.  Please have a look at the TIRC"
		echo "manual page BUGS section concerning the SVIPC resource hogging."
	else
	    echo "You don't have usable shared memory facilites."
	fi
fi

dnl Termcap lib selection

dnl First check if tparm() is available.  If not, we won't be able to
dnl use scrolling regions.

tirc_cv_have_tparm=no

AC_CHECK_LIB(termcap, tparm, [tirc_cv_have_tparm=termcap],
	[tirc_cv_have_tparm=no])
if test "$tirc_cv_have_tparm" = no; then
	AC_CHECK_LIB(termlib, tparm, [tirc_cv_have_tparm=termlib],
		[tirc_cv_have_tparm=no])
fi
if test "$tirc_cv_have_tparm" = no; then
	AC_CHECK_LIB(curses, tparm, [tirc_cv_have_tparm=curses],
		[tirc_cv_have_tparm=no])
fi
if test "$tirc_cv_have_tparm" = no; then
	AC_CHECK_LIB(ncursesw, tparm, [tirc_cv_have_tparm=ncursesw],
		[tirc_cv_have_tparm=no])
fi
if test "$tirc_cv_have_tparm" = no; then
	AC_CHECK_LIB(ncurses, tparm, [tirc_cv_have_tparm=ncurses],
		[tirc_cv_have_tparm=no])
fi

tirc_cv_have_termlibrary=no
tirc_cv_have_tgetent=no
tirc_cv_have_tgetstr=no
tirc_cv_have_tgetnum=no
tirc_cv_have_tgoto=no
tirc_cv_have_tputs=no

dnl First check the library we found tparm() in.  If this one isn't
dnl like we need it, check the others and don't use tparm() then.
if test "$tirc_cv_have_tparm" != no; then
    AC_CHECK_LIB($tirc_cv_have_tparm, tgetent, [tirc_cv_have_tgetent=yes],
	    [tirc_cv_have_tgetent=no])
    if test "$tirc_cv_have_tgetent" = yes; then
	    AC_CHECK_LIB($tirc_cv_have_tparm, tgetstr, [tirc_cv_have_tgetstr=yes],
		    [tirc_cv_have_tgetstr=no])
	    AC_CHECK_LIB($tirc_cv_have_tparm, tgetnum, [tirc_cv_have_tgetnum=yes],
		    [tirc_cv_have_tgetnum=no])
	    AC_CHECK_LIB($tirc_cv_have_tparm, tgoto, [tirc_cv_have_tgoto=yes],
		    [tirc_cv_have_tgoto=no])
	    AC_CHECK_LIB($tirc_cv_have_tparm, tputs, [tirc_cv_have_tputs=yes],
		    [tirc_cv_have_tputs=no])
	    case "$tirc_cv_have_tparm" in
	    termcap)	AC_CHECK_HEADERS(termcap.h term.h)
			AC_DEFINE(HAVE_TERMCAP);;
	    termlib)	AC_CHECK_HEADERS(term.h)
			AC_DEFINE(HAVE_TERMLIB);;
	    curses)	AC_CHECK_HEADERS(curses.h term.h)
			AC_DEFINE(HAVE_CURSES);;
	    ncursesw)	AC_CHECK_HEADERS(ncursesw/ncurses.h, ncursesw/curses.h, ncursesw/term.h)
			AC_DEFINE(HAVE_NCURSESW);;
	    ncurses)	AC_CHECK_HEADERS(ncurses.h curses.h term.h)
			AC_DEFINE(HAVE_NCURSES);;
	    esac
	    LIBS="$LIBS -l$tirc_cv_have_tparm"
	    tirc_cv_have_termlibrary=yes
	    AC_DEFINE(HAVE_TPARM)
    else
	    tirc_cv_have_tparm = no;
    fi
fi

dnl Nope, check libs sequentially for usability.  Start with libtermcap.
if test "$tirc_cv_have_termlibrary" = no; then
    tirc_cv_have_tgetent=no
    tirc_cv_have_tgetstr=no
    tirc_cv_have_tgetnum=no
    tirc_cv_have_tgoto=no
    tirc_cv_have_tparm=no
    tirc_cv_have_tputs=no

    AC_CHECK_LIB(termcap, tgetent, [tirc_cv_have_tgetent=yes],
	    [tirc_cv_have_tgetent=no])
    if test "$tirc_cv_have_tgetent" = yes; then
	    AC_CHECK_LIB(termcap, tgetstr, [tirc_cv_have_tgetstr=yes],
		    [tirc_cv_have_tgetstr=no])
	    AC_CHECK_LIB(termcap, tgetnum, [tirc_cv_have_tgetnum=yes],
		    [tirc_cv_have_tgetnum=no])
	    AC_CHECK_LIB(termcap, tgoto, [tirc_cv_have_tgoto=yes],
		    [tirc_cv_have_tgoto=no])
	    AC_CHECK_LIB(termcap, tputs, [tirc_cv_have_tputs=yes],
		    [tirc_cv_have_tputs=no])
    fi
    if test "$tirc_cv_have_tgetent" = yes -a "$tirc_cv_have_tgetnum" = yes -a \
	    "$tirc_cv_have_tgetstr" = yes -a "$tirc_cv_have_tgoto" = yes -a \
	    "$tirc_cv_have_tputs" = yes; then
	    LIBS="$LIBS -ltermcap"
	    tirc_cv_have_termlibrary=yes
	    AC_CHECK_HEADERS(termcap.h term.h)
	    AC_DEFINE(HAVE_TERMCAP)
	    if test "$tirc_cv_have_tparm" = yes; then
		    AC_DEFINE(HAVE_TPARM)
	    fi
    fi
fi

if test "$tirc_cv_have_termlibrary" = no; then
    tirc_cv_have_tparm=no

    tirc_cv_have_tgetent=no
    tirc_cv_have_tgetstr=no
    tirc_cv_have_tgetnum=no
    tirc_cv_have_tgoto=no
    tirc_cv_have_tparm=no
    tirc_cv_have_tputs=no

dnl Query libtermlib.
    AC_CHECK_LIB(termlib, tgetent, [tirc_cv_have_tgetent=yes],
	    [tirc_cv_have_tgetent=no])
    if test "$tirc_cv_have_tgetent" = yes; then
	    AC_CHECK_LIB(termlib, tgetstr, [tirc_cv_have_tgetstr=yes],
		    [tirc_cv_have_tgetstr=no])
	    AC_CHECK_LIB(termlib, tgetnum, [tirc_cv_have_tgetnum=yes],
		    [tirc_cv_have_tgetnum=no])
	    AC_CHECK_LIB(termlib, tgoto, [tirc_cv_have_tgoto=yes],
		    [tirc_cv_have_tgoto=no])
	    AC_CHECK_LIB(termlib, tputs, [tirc_cv_have_tputs=yes],
		    [tirc_cv_have_tputs=no])
	    AC_CHECK_LIB(ncurses, tparm, [tirc_cv_have_tparm=yes],
		    [tirc_cv_have_tparm=no])
    fi
    if test "$tirc_cv_have_tgetent" = yes -a "$tirc_cv_have_tgetnum" = yes -a \
	    "$tirc_cv_have_tgetstr" = yes -a "$tirc_cv_have_tgoto" = yes -a \
	    "$tirc_cv_have_tputs" = yes; then
	    LIBS="$LIBS -ltermlib"
	    tirc_cv_have_termlibrary=yes
	    AC_CHECK_HEADERS(term.h)
	    AC_DEFINE(HAVE_TERMLIB)
	    if test "$tirc_cv_have_tparm" = yes; then
		    AC_DEFINE(HAVE_TPARM)
	    fi
    fi
fi

if test "$tirc_cv_have_termlibrary" = no; then
    tirc_cv_have_tgetent=no
    tirc_cv_have_tgetstr=no
    tirc_cv_have_tgetnum=no
    tirc_cv_have_tgoto=no
    tirc_cv_have_tparm=no
    tirc_cv_have_tputs=no

dnl Same game with libcurses.
    AC_CHECK_LIB(curses, tgetent, [tirc_cv_have_tgetent=yes],
	    [tirc_cv_have_tgetent=no])
    if test "$tirc_cv_have_tgetent" = yes; then
	    AC_CHECK_LIB(curses, tgetstr, [tirc_cv_have_tgetstr=yes],
		    [tirc_cv_have_tgetstr=no])
	    AC_CHECK_LIB(curses, tgetnum, [tirc_cv_have_tgetnum=yes],
		    [tirc_cv_have_tgetnum=no])
	    AC_CHECK_LIB(curses, tgoto, [tirc_cv_have_tgoto=yes],
		    [tirc_cv_have_tgoto=no])
	    AC_CHECK_LIB(curses, tputs, [tirc_cv_have_tputs=yes],
		    [tirc_cv_have_tputs=no])
	    AC_CHECK_LIB(ncurses, tparm, [tirc_cv_have_tparm=yes],
		    [tirc_cv_have_tparm=no])
    fi
    if test "$tirc_cv_have_tgetent" = yes -a "$tirc_cv_have_tgetnum" = yes -a \
	    "$tirc_cv_have_tgetstr" = yes -a "$tirc_cv_have_tgoto" = yes -a \
	    "$tirc_cv_have_tputs" = yes; then
	    LIBS="$LIBS -lcurses"
	    tirc_cv_have_termlibrary=yes
	    AC_CHECK_HEADERS(curses.h term.h)
	    AC_DEFINE(HAVE_CURSES)
	    if test "$tirc_cv_have_tparm" = yes; then
		    AC_DEFINE(HAVE_TPARM)
	    fi
    fi
fi

if test "$tirc_cv_have_termlibrary" = no; then
    tirc_cv_have_tgetent=no
    tirc_cv_have_tgetstr=no
    tirc_cv_have_tgetnum=no
    tirc_cv_have_tgoto=no
    tirc_cv_have_tparm=no
    tirc_cv_have_tputs=no

dnl As a final resort, try libncurses.
    AC_CHECK_LIB(ncurses, tgetent, [tirc_cv_have_tgetent=yes],
	    [tirc_cv_have_tgetent=no])
    if test "$tirc_cv_have_tgetent" = yes; then
	    AC_CHECK_LIB(ncurses, tgetstr, [tirc_cv_have_tgetstr=yes],
		    [tirc_cv_have_tgetstr=no])
	    AC_CHECK_LIB(ncurses, tgetnum, [tirc_cv_have_tgetnum=yes],
		    [tirc_cv_have_tgetnum=no])
	    AC_CHECK_LIB(ncurses, tgoto, [tirc_cv_have_tgoto=yes],
		    [tirc_cv_have_tgoto=no])
	    AC_CHECK_LIB(ncurses, tputs, [tirc_cv_have_tputs=yes],
		    [tirc_cv_have_tputs=no])
	    AC_CHECK_LIB(ncurses, tparm, [tirc_cv_have_tparm=yes],
		    [tirc_cv_have_tparm=no])
    fi
    if test "$tirc_cv_have_tgetent" = yes -a "$tirc_cv_have_tgetnum" = yes -a \
	    "$tirc_cv_have_tgetstr" = yes -a "$tirc_cv_have_tgoto" = yes -a \
	    "$tirc_cv_have_tputs" = yes; then
	    LIBS="$LIBS -lncurses"
	    tirc_cv_have_termlibrary=yes
	    AC_CHECK_HEADERS(ncurses.h curses.h)
	    AC_DEFINE(HAVE_NCURSES)
	    if test "$tirc_cv_have_tparm" = yes; then
		    AC_DEFINE(HAVE_TPARM)
	    fi
    fi
fi

if test "$tirc_cv_have_termlibrary" != yes; then
	echo "Fatal: no adequate terminal library was found; consider installing a free implementation or a superset like ncurses"
	exit 1
fi

dnl If we include term.h, check if we may actually include this.
dnl This doesn't work on AIX, for example.
if test "$ac_cv_header_term_h" = yes; then
	AC_MSG_CHECKING(whether we may actually include term.h with curses.h)
	AC_CACHE_VAL(tirc_cv_include_term_h, [
	AC_TRY_RUN([
#ifdef	HAVE_CURSES_H
#include <curses.h>
#elif defined(HAVE_NCURSES_H)
#include <ncurses.h>
#elif defined(HAVE_TERMCAP_H)
#include <termcap.h>
#endif
#include <term.h>
main() { exit(0); }
	], [tirc_cv_include_term_h=yes], [tirc_cv_include_term_h=no], :)])

	AC_MSG_RESULT($tirc_cv_include_term_h)

	if test "$tirc_cv_include_term_h" = yes; then
		AC_DEFINE(INCLUDE_TERM_H)
	fi
fi

dnl Check for regular expression support.  We want 1003.2 extended regular
dnl expressions (regexec, regcomp) or alternatively the older regcmp, regex
dnl stuff (basic regex).  If both are unavailable (only the pathetic
dnl re_comp/re_exec), we use Spencer's bundled extended regex lib.

if test "$tirc_cv_bundled_re" != yes -a "$tirc_cv_gnu_re" != yes; then
	AC_CHECK_FUNCS(regcomp regexec regfree, [tirc_cv_have_posix_re=yes],
		[tirc_cv_have_posix_re=no])
	if test "$tirc_cv_have_posix_re" = no; then
		AC_CHECK_FUNCS(regcmp regex, [tirc_cv_have_old_re=yes],
			[tirc_cv_have_old_re=np])
		if test "$tirc_cv_have_old_re" = yes; then
		    echo "Found only old basic regular expression functions (regcmp, regex)"
		    echo "You might want to use the bundled BSD extended regular expression functions"
		    echo "anyway (see configure --with-bundled-regex)"
		else
		    echo "No regular expression functions found, trying to use the bundled ones."
		    echo "If this fails for some reason, you can try the GNU regex library, which is"
		    echo "available via ftp from prep.ai.mit.edu."
		    echo "(see configure --with-gnu-regex)"
		    tirc_cv_bundled_re=yes;
		fi
	fi
fi
	
AC_SUBST(REOBJ)
AC_SUBST(REINCLUDE)
REOBJ=""
REINCLUDE=""
if test "$tirc_cv_bundled_re" = yes; then
	echo "Using bundled regular expression library"
	AC_DEFINE(HAVE_REGCOMP)
	AC_DEFINE(HAVE_REGEXEC)
	AC_DEFINE(HAVE_REGFREE)
	REOBJ="regcomp.o regerror.o regexec.o regfree.o"
	REINCLUDE="-Iregex"

	AC_MSG_CHECKING(whether we have _POSIX2_RE_DUP_MAX)
	AC_CACHE_VAL(tirc_cv_posix2_def, [
	AC_TRY_RUN([
#include <limits.h>
main()
{
#ifdef	_POSIX2_RE_DUP_MAX
	exit(0);
#else
	exit(1);
#endif
}], [tirc_cv_posix2_def=yes], [tirc_cv_posix2_def=no], :)])
	AC_MSG_RESULT($tirc_cv_posix2_def)
	if test "$tirc_cv_posix2_def" = no; then
		REFLAGS=${REFLAGS-"-D_POSIX2_RE_DUP_MAX=255"}
	fi
	AC_SUBST(REFLAGS)
fi

if test "$tirc_cv_gnu_re" = yes; then
	echo "Using GNU regular expression library"
	echo "If you have not already done so, get GNU regex from prep.ai.mit.edu, build"
	echo "and copy regex.o and regex.h into this directory (_after_ a make clean)."
	AC_DEFINE(HAVE_REGCOMP)
	AC_DEFINE(HAVE_REGEXEC)
	AC_DEFINE(HAVE_REGFREE)
	REOBJ="regex.o"
fi

dnl Check for socketpair(); if it exists, use a Unix domain socket for
dnl stream pipes, else if we run on SVR4, the normal pipe() is already
dnl full duplex bidirectional.
AC_CHECK_FUNCS(socketpair, [tirc_cv_have_socketpair=yes],
		[tirc_cv_have_socketpair=no])
if test "$tirc_cv_have_socketpair" = no; then
	AC_CHECK_HEADER(elf.h, AC_DEFINE(SVR4) tirc_cv_have_fdpipe=yes)
	if test "$tirc_cv_have_fdpipe" != yes; then
		echo "Duh.  socketpair() not found and not on SVR4, thus no full duplex pipes."
		echo "Where's the socket library?"
		exit 1
	fi
fi

dnl Check for the TIOCGWINSZ ioctl.  We check for the structure definition,
dnl and if it exists the include files better had TIOCGWINSZ as well.
AC_MSG_CHECKING(for TIOCGWINSZ ioctl)
AC_CACHE_VAL(tirc_cv_have_tiocgwinsz, [
AC_EGREP_CPP([struct.*winsize], [
#include <sys/ioctl.h>
#ifdef	HAVE_SYS_TERMIOS_H
#include <sys/termios.h>
#endif
],
	[tirc_cv_have_tiocgwinsz=yes], [tirc_cv_have_tiocgwinsz=no])])
AC_MSG_RESULT($tirc_cv_have_tiocgwinsz)

dnl If struct winsize is not available, check for TIOCGSIZE.
if test "$tirc_cv_have_tiocgwinsz" = no; then
	AC_MSG_CHECKING(for TIOCGSIZE ioctl)
	AC_CACHE_VAL(tirc_cv_have_tiocgsize, [
	AC_EGREP_CPP([struct.*ttysize], [#include <sys/ioctl.h>],
		[tirc_cv_have_tiocgsize=yes], [tirc_cv_have_tiocgsize=no])])
	AC_MSG_RESULT($tirc_cv_have_tiocgsize)
	AC_DEFINE(HAVE_TIOCGSIZE)
else
	AC_DEFINE(HAVE_TIOCGWINSZ)
fi

dnl Check for sig_atomic_t.
AC_MSG_CHECKING(whether sig_atomic_t is available)
AC_CACHE_VAL(tirc_cv_have_sig_atomic_t, [
	AC_TRY_RUN([
#include <sys/types.h>
#include <signal.h>
main()
{
	sig_atomic_t t = 1;
	exit(0);
}	], [tirc_cv_have_sig_atomic_t=yes], [tirc_cv_have_sig_atomic_t=no], :)])

AC_MSG_RESULT($tirc_cv_have_sig_atomic_t)

if test "$tirc_cv_have_sig_atomic_t" = no; then
	AC_DEFINE(sig_atomic_t, int)
fi

dnl Check if luser wants linux/glibc fix.
if test "$tirc_cv_linux_glibc" = yes; then
	AC_DEFINE(BRAINDEAD_GLIBC)
fi

dnl Check if luser wants terminal colouring with ansi sequences.
if test "$tirc_cv_ansi_colours" = yes; then
	AC_DEFINE(WITH_ANSI_COLOURS)
fi

if test "$tirc_cv_dlmod" = yes; then
	if test "$ac_cv_func_dlopen" = yes -a "$ac_cv_func_dlclose" = yes \
	    -a "$ac_cv_func_dlsym" = yes -a "$ac_cv_func_dlerror" = yes; then
		AC_DEFINE(WITH_DLMOD)
	else
		echo 'Dynamic loadable modules not available.'
	fi
fi

dnl Get the optimization and debug stuff out of CFLAGS where the darn stupid
dnl autoconf dumps them into.
CFLAGS=`echo $CFLAGS | sed -e 's/-O.//' -e 's/-g//'`

dnl Add efence if configured.
if test "$tirc_cv_efence" = yes; then
	LIBS="$LIBS -L/usr/local/lib -lefence"
fi

AC_OUTPUT(Makefile modules/Makefile)

echo 'Configuration complete.'

echo 'Now type "make".'
